
#include <gtest/gtest.h>
#include <sstream>
#include "list.hpp"

using namespace std;
using list::Node;

TEST(ListTests, FromStringBasic) {
    Node* const foo_list_head = list::from_string("foo");
    Node* foo_list = foo_list_head;

    EXPECT_EQ(foo_list->data, 'f');
    // ASSERT instead of EXPECT means: end the test here if this fails, do not try to continue
    // running. This is useful to prevent early crashes.
    ASSERT_NE(foo_list->next, nullptr);

    foo_list = foo_list->next;
    EXPECT_EQ(foo_list->data, 'o');
    ASSERT_NE(foo_list->next, nullptr);

    foo_list = foo_list->next;
    EXPECT_EQ(foo_list->data, 'o');
    ASSERT_EQ(foo_list->next, nullptr);

    list::free(foo_list_head);
}

TEST(ListTests, Length) {
    Node* const head = list::from_string("foo");
    EXPECT_EQ(list::length(head), 3);
    list::free(head);

	Node* const empty = list::from_string("");
	EXPECT_EQ(list::length(empty), 0);
	list::free(empty);
}

// Add remaining tests below. All tests should follow
// the format of `TEST(ListTests, <TestName>){}`.

TEST(ListTests, Print)
{
	stringstream output;
	Node* const head = list::from_string("Hello");
	list::print(output, head);
	EXPECT_EQ(output.str(), "Hello");
	list::free(head);

	stringstream output2;
	Node* const head2 = list::from_string("");
	list::print(output2, head2);
	EXPECT_EQ(output2.str(), "");
	list::free(head2);

}

TEST(ListTests, Copy)
{
	stringstream output;
	Node* const head = list::from_string("hello");
	Node* copy = list::copy(head);
	list::print(output, copy);
	EXPECT_EQ(output.str(), "hello");
	list::free(head);
	list::free(copy);

	stringstream emptyOutput;
	Node* const otherhead = list::from_string("");
	Node* copy2 = list::copy(otherhead);
	list::print(emptyOutput, copy2);
	EXPECT_EQ(emptyOutput.str(), "");
	list::free(otherhead);
	list::free(copy2);
}


TEST(ListTests, compareNoN)
{
	Node* const samestr1 = list::from_string("bruh");
	Node* const samestr2 = list::from_string("bruh");
	EXPECT_EQ(list::compare(samestr1, samestr2), 0);

	Node* const lString = list::from_string("abcde");
	Node* const rString = list::from_string("abcdf");
	EXPECT_LT(list::compare(lString, rString), 0); 
	EXPECT_GT(list::compare(rString, lString), 0);

	Node* const empty = list::from_string("");
	EXPECT_LT(list::compare(empty, samestr1), 0);
	EXPECT_GT(list::compare(samestr1, empty), 0);

	list::free(samestr1);
	list::free(samestr2);
	list::free(lString);
	list::free(rString);
	list::free(empty);
}

TEST(ListTests, compareN)
{
	Node* const word1 = list::from_string("Caleb Chu");
	Node* const word2 = list::from_string("Caleb");
	Node* const word3 = list::from_string("Caleb Chu");
	Node* const word4 = list::from_string("");
	EXPECT_EQ(list::compare(word1, word3, 5), 0);
	EXPECT_EQ(list::compare(word1, word3, 50), 0);
	
	EXPECT_LT(list::compare(word2, word1, 10), 0);
	EXPECT_GT(list::compare(word1, word2, 10), 0);
	EXPECT_EQ(list::compare(word1, word2, 5), 0);
	
	EXPECT_EQ(list::compare(word3, word4, 0), 0);
	EXPECT_LT(list::compare(word4, word3, 5), 0);
	EXPECT_GT(list::compare(word3, word4, 5), 0);

	list::free(word1);
	list::free(word2);
	list::free(word3);
	list::free(word4);
}

TEST(ListTests, append)
{
	stringstream output;
	Node* const part1 = list::from_string("UC ");
	Node* const part2 = list::from_string("Irvine");
	Node* const part3 = list::from_string("");
	Node* append = list::append(part1, part2);
	list::print(output, append);
	EXPECT_EQ(output.str(), "UC Irvine");
	
	stringstream output2;
	Node* append2 = list::append(part1, part3);
	list::print(output2, append2);
	EXPECT_EQ(output2.str(), "UC ");

	list::free(part1);
	list::free(part2);
	list::free(part3);
	list::free(append);
	list::free(append2);
}

TEST(ListTests, reverse)
{
	stringstream output;
	Node* const head = list::from_string("abcdefu");
	Node* reverse = list::reverse(head);
	list::print(output, reverse);
	EXPECT_EQ(output.str(), "ufedcba");
	list::free(head);
	list::free(reverse);

	stringstream output2;
	Node* const head2 = list::from_string("");
	Node* reverse2 = list::reverse(head2);
	list::print(output2, reverse2);
	EXPECT_EQ(output2.str(), "");
	list::free(head2);
	list::free(reverse2);
}

TEST(ListTests, index)
{
	Node* const head = list::from_string("bruh");
	EXPECT_EQ(list::index(head, head), 0);
	list::free(head);
}

TEST(ListTests, find_char)
{
	Node* const head = list::from_string("pride is the devil");
	Node* result1 = list::find_char(head, 'p');
	Node* result2 = list::find_char(head, '\0');

	EXPECT_EQ(list::index(head, result1), 0);
	EXPECT_EQ(list::index(head, result2), 18);
	list::free(head);
}
/*
TEST(ListTests, findList)
{
	Node* head = list::from_string("pride is the devil");
	Node* find = list::from_string("devil");
	Node* res = list::find_list(head, find);
	EXPECT_EQ(list::index(head, find), 13);

	list::free(head);
	list::free(find);
	list::free(res);
}
*/

TEST(ListTests, Nth)
{
	Node *head1{list::from_string("Hello")}, *result1{list::nth(head1, 4)};
	EXPECT_EQ(result1->data, 'o');
	list::free(head1);
}

TEST(ListTests, Last)
{
	Node *head1{list::from_string("Hello")}, *result{list::last(head1)};
	EXPECT_EQ(result->data, 'o');
	list::free(head1);
}
